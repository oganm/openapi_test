% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/primitive_type.R
\docType{class}
\name{PrimitiveType}
\alias{PrimitiveType}
\title{PrimitiveType}
\format{
An \code{R6Class} generator object
}
\description{
PrimitiveType Class

PrimitiveType Class
}
\details{
Create a new PrimitiveType
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{value}}{character [optional]}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-PrimitiveType-new}{\code{PrimitiveType$new()}}
\item \href{#method-PrimitiveType-toJSON}{\code{PrimitiveType$toJSON()}}
\item \href{#method-PrimitiveType-fromJSON}{\code{PrimitiveType$fromJSON()}}
\item \href{#method-PrimitiveType-toJSONString}{\code{PrimitiveType$toJSONString()}}
\item \href{#method-PrimitiveType-fromJSONString}{\code{PrimitiveType$fromJSONString()}}
\item \href{#method-PrimitiveType-validateJSON}{\code{PrimitiveType$validateJSON()}}
\item \href{#method-PrimitiveType-toString}{\code{PrimitiveType$toString()}}
\item \href{#method-PrimitiveType-isValid}{\code{PrimitiveType$isValid()}}
\item \href{#method-PrimitiveType-getInvalidFields}{\code{PrimitiveType$getInvalidFields()}}
\item \href{#method-PrimitiveType-print}{\code{PrimitiveType$print()}}
\item \href{#method-PrimitiveType-clone}{\code{PrimitiveType$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PrimitiveType-new"></a>}}
\if{latex}{\out{\hypertarget{method-PrimitiveType-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new PrimitiveType class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PrimitiveType$new(value = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{value}

\item{\code{...}}{Other optional arguments.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PrimitiveType-toJSON"></a>}}
\if{latex}{\out{\hypertarget{method-PrimitiveType-toJSON}{}}}
\subsection{Method \code{toJSON()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PrimitiveType$toJSON()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
PrimitiveType in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PrimitiveType-fromJSON"></a>}}
\if{latex}{\out{\hypertarget{method-PrimitiveType-fromJSON}{}}}
\subsection{Method \code{fromJSON()}}{
Deserialize JSON string into an instance of PrimitiveType
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PrimitiveType$fromJSON(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of PrimitiveType
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PrimitiveType-toJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-PrimitiveType-toJSONString}{}}}
\subsection{Method \code{toJSONString()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PrimitiveType$toJSONString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
PrimitiveType in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PrimitiveType-fromJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-PrimitiveType-fromJSONString}{}}}
\subsection{Method \code{fromJSONString()}}{
Deserialize JSON string into an instance of PrimitiveType
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PrimitiveType$fromJSONString(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of PrimitiveType
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PrimitiveType-validateJSON"></a>}}
\if{latex}{\out{\hypertarget{method-PrimitiveType-validateJSON}{}}}
\subsection{Method \code{validateJSON()}}{
Validate JSON input with respect to PrimitiveType and throw an exception if invalid
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PrimitiveType$validateJSON(input)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{the JSON input}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PrimitiveType-toString"></a>}}
\if{latex}{\out{\hypertarget{method-PrimitiveType-toString}{}}}
\subsection{Method \code{toString()}}{
To string (JSON format)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PrimitiveType$toString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
String representation of PrimitiveType
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PrimitiveType-isValid"></a>}}
\if{latex}{\out{\hypertarget{method-PrimitiveType-isValid}{}}}
\subsection{Method \code{isValid()}}{
Return true if the values in all fields are valid.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PrimitiveType$isValid()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
true if the values in all fields are valid.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PrimitiveType-getInvalidFields"></a>}}
\if{latex}{\out{\hypertarget{method-PrimitiveType-getInvalidFields}{}}}
\subsection{Method \code{getInvalidFields()}}{
Return a list of invalid fields (if any).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PrimitiveType$getInvalidFields()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of invalid fields (if any).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PrimitiveType-print"></a>}}
\if{latex}{\out{\hypertarget{method-PrimitiveType-print}{}}}
\subsection{Method \code{print()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PrimitiveType$print(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PrimitiveType-clone"></a>}}
\if{latex}{\out{\hypertarget{method-PrimitiveType-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PrimitiveType$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
