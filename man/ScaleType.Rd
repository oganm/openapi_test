% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scale_type.R
\docType{class}
\name{ScaleType}
\alias{ScaleType}
\title{ScaleType}
\format{
An \code{R6Class} generator object
}
\description{
ScaleType Class

ScaleType Class
}
\details{
Create a new ScaleType
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{value}}{character [optional]}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ScaleType-new}{\code{ScaleType$new()}}
\item \href{#method-ScaleType-toJSON}{\code{ScaleType$toJSON()}}
\item \href{#method-ScaleType-fromJSON}{\code{ScaleType$fromJSON()}}
\item \href{#method-ScaleType-toJSONString}{\code{ScaleType$toJSONString()}}
\item \href{#method-ScaleType-fromJSONString}{\code{ScaleType$fromJSONString()}}
\item \href{#method-ScaleType-validateJSON}{\code{ScaleType$validateJSON()}}
\item \href{#method-ScaleType-toString}{\code{ScaleType$toString()}}
\item \href{#method-ScaleType-isValid}{\code{ScaleType$isValid()}}
\item \href{#method-ScaleType-getInvalidFields}{\code{ScaleType$getInvalidFields()}}
\item \href{#method-ScaleType-print}{\code{ScaleType$print()}}
\item \href{#method-ScaleType-clone}{\code{ScaleType$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ScaleType-new"></a>}}
\if{latex}{\out{\hypertarget{method-ScaleType-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new ScaleType class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScaleType$new(value = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{value}

\item{\code{...}}{Other optional arguments.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ScaleType-toJSON"></a>}}
\if{latex}{\out{\hypertarget{method-ScaleType-toJSON}{}}}
\subsection{Method \code{toJSON()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScaleType$toJSON()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
ScaleType in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ScaleType-fromJSON"></a>}}
\if{latex}{\out{\hypertarget{method-ScaleType-fromJSON}{}}}
\subsection{Method \code{fromJSON()}}{
Deserialize JSON string into an instance of ScaleType
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScaleType$fromJSON(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of ScaleType
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ScaleType-toJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-ScaleType-toJSONString}{}}}
\subsection{Method \code{toJSONString()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScaleType$toJSONString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
ScaleType in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ScaleType-fromJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-ScaleType-fromJSONString}{}}}
\subsection{Method \code{fromJSONString()}}{
Deserialize JSON string into an instance of ScaleType
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScaleType$fromJSONString(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of ScaleType
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ScaleType-validateJSON"></a>}}
\if{latex}{\out{\hypertarget{method-ScaleType-validateJSON}{}}}
\subsection{Method \code{validateJSON()}}{
Validate JSON input with respect to ScaleType and throw an exception if invalid
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScaleType$validateJSON(input)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{the JSON input}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ScaleType-toString"></a>}}
\if{latex}{\out{\hypertarget{method-ScaleType-toString}{}}}
\subsection{Method \code{toString()}}{
To string (JSON format)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScaleType$toString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
String representation of ScaleType
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ScaleType-isValid"></a>}}
\if{latex}{\out{\hypertarget{method-ScaleType-isValid}{}}}
\subsection{Method \code{isValid()}}{
Return true if the values in all fields are valid.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScaleType$isValid()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
true if the values in all fields are valid.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ScaleType-getInvalidFields"></a>}}
\if{latex}{\out{\hypertarget{method-ScaleType-getInvalidFields}{}}}
\subsection{Method \code{getInvalidFields()}}{
Return a list of invalid fields (if any).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScaleType$getInvalidFields()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of invalid fields (if any).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ScaleType-print"></a>}}
\if{latex}{\out{\hypertarget{method-ScaleType-print}{}}}
\subsection{Method \code{print()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScaleType$print(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ScaleType-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ScaleType-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScaleType$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
